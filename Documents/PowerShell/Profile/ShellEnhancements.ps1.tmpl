{{ template "Header.tmpl" . }}
Function Set-NewLocation {
	[CmdletBinding()]
	[Alias("mkcd")]
	Param(
		[Parameter(Mandatory=$true)]
		$Path
	)

	New-Item -ItemType Directory $Path | ForEach-Object { Set-Location $_ }
}

Function Set-LocationToContainingDirectory {
	[CmdletBinding()]
	[Alias("cdd")]
	Param(
		[Parameter(ValueFromPipeline)] $Path
	)

	Set-Location -Path ($Path |  Split-Path -Parent)
}

Function Set-LocationInteractive {
	[CmdletBinding()]
	[Alias("cdi")]
	Param(
			[Parameter()]
			[switch]$File,
			[switch]$All
	)

	# Build fd command arguments
	$fdArgs = @('--color=always')

	if ($File) {
			$fdArgs += '--type', 'file'
	} else {
			$fdArgs += '--type', 'dir', '--exclude', '.git'
	}

	if ($All) {
			$fdArgs += '--unrestricted'
	}

	# Common fzf options
	$fzfOptions = '--height=90% --reverse --border --ansi'

	# Execute fd and fzf
	$Selection = & fd @fdArgs | & fzf ($fzfOptions -split ' ')

	if ($null -ne $Selection) {
			if ($File) {
					Set-Location (Split-Path -Path $Selection -Parent)
			} else {
					Set-Location $Selection
			}
	}
}

Function Copy-LocationToClipboard {
	[CmdletBinding(DefaultParameterSetName='Path')]
	[Alias("pwdc")]
	Param(
		[Parameter(ParameterSetName = 'Posix', Position = 0)]
		[Parameter(ParameterSetName = 'WSL', Position = 0)]
		[Parameter(ParameterSetName = 'Path', Position = 0)]
		[Parameter(Position = 0)]
		$Path = $(Get-Location),
		[Parameter(ParameterSetName = 'Posix')]
		[switch]$Posix,
		[Parameter(ParameterSetName = 'WSL')]
		[switch]$WSL,
		[switch]$Relative
	)

	$ResolvedPath = Resolve-Path -Path $Path -Relative:$Relative
	if ($Posix) {
			$ResolvedPath = ($ResolvedPath.Path ?? $ResolvedPath).Replace('\', '/')
	} elseif ($WSL) {
			$ResolvedPath = ($ResolvedPath -replace '^([A-Za-z]):\\(.*)', {"/mnt/" + $_.Groups[1].Value.ToLower() + "/" + $_.Groups[2].Value}) -replace '\\', '/'
	}
	Set-Clipboard -Value $ResolvedPath

	Write-Host("$(fvl($ResolvedPath)) $(frt('copied to clipboard.'))")
}

function Edit-Profile {
	[Alias("ep")]
	Param()
	code ($PROFILE | Split-Path -Parent)
}

Function Edit-Chezmoi {
	[Alias("ecm")]
	Param()
	code $env:USERPROFILE\.local\share\chezmoi
}

function Show-ApprovedVerbs {
	[CmdletBinding()]
	param(
			[switch]$SortByVerb
	)

	$verbs = Get-Verb

	if ($SortByVerb) {
			$grouped = $verbs | Sort-Object Verb | Group-Object Group
	}
	else {
			$grouped = $verbs | Group-Object Group
	}

	foreach ($group in $grouped | Sort-Object Name) {
			Write-Host "`n[$($group.Name)]" -ForegroundColor Cyan

			$group.Group | ForEach-Object {
					Write-Host ("{0,-15} - {1}" -f $_.Verb, $_.Description)
			}
	}
}
