{{ template "Header.tmpl" . }}
Function Set-NewLocation {
	[CmdletBinding()]
	[Alias("mkcd")]
	Param(
		[Parameter(Mandatory=$true)]
		$Path
	)

	New-Item -ItemType Directory $Path | ForEach-Object { Set-Location $_ }
}

Function Copy-LocationToClipboard {
	[CmdletBinding(DefaultParameterSetName='Path')]
	[Alias("pwdc")]
	Param(
		[Parameter(ParameterSetName = 'Posix', Position = 0)]
		[Parameter(ParameterSetName = 'WSL', Position = 0)]
		[Parameter(ParameterSetName = 'Path', Position = 0)]
		[Parameter(Position = 0)]
		$Path = $(Get-Location),
		[Parameter(ParameterSetName = 'Posix')]
		[switch]$Posix,
		[Parameter(ParameterSetName = 'WSL')]
		[switch]$WSL,
		[switch]$Relative
	)

	$ResolvedPath = Resolve-Path -Path $Path -Relative:$Relative
	if ($Posix) {
			$ResolvedPath = ($ResolvedPath.Path ?? $ResolvedPath).Replace('\', '/')
	} elseif ($WSL) {
			$ResolvedPath = ($ResolvedPath -replace '^([A-Za-z]):\\(.*)', {"/mnt/" + $_.Groups[1].Value.ToLower() + "/" + $_.Groups[2].Value}) -replace '\\', '/'
	}
	Set-Clipboard -Value $ResolvedPath

	Write-Host("$(fvl($ResolvedPath)) $(frt('copied to clipboard.'))")
}

Function Set-LocationInteractive {
	[CmdletBinding()]
	[Alias("cdi")]
	Param(
		[Parameter()]
		[switch]$File
	)

	$Location = Get-Location
	if ($File) {
		$Location = fd --type file --color=always | fzf --height=90% --reverse --border --ansi
		if ($null -ne $Location) {
			Set-Location (Split-Path -Path $Location -Parent)
		}
	} else {
		fd --type dir --exclude .git --color=always | fzf --height=90% --reverse --border --ansi | Set-Location
	}
}
