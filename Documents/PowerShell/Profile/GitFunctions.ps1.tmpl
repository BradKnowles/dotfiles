{{ template "Header.tmpl" . }}
function Open-GitUrl {
	[Alias("opgu")]
	Param()

	$url = git ls-remote --get-url 2>nul
	if ($null -eq $url) {
		Write-Error "Not a git directory."
	} else {
		$url = $url -replace 'git@ssh\.([^:]+):(.*)\.git', 'https://$1/$2'
		$url = $url -replace 'git@(.*?):(.*)\.git', 'https://$1/$2'
		Write-Host "$(frt('Opening')) $(fvl($url))"
		Start-Process $url
	}
}

Function Set-LocationGitRoot {
	[CmdletBinding()]
	[Alias("cdgr")]
	Param()

	$gitRoot = git rev-parse --show-toplevel 2>nul
	if ($null -ne $gitRoot) {
		Set-Location -Path $gitRoot
	} else {
		Write-Error "Not a git directory."
	}
}

Function Set-GitBranchInteractive {
	[CmdletBinding()]
	[Alias("sgbi")]
	Param()

	$localformat = @("%(color:brightgreen)L: %(refname:short)%(color:reset)",
	"%(color:brightred)%(upstream:short)%(color:reset)",
	"%(color:yellow)%(objectname:short)%(color:reset)",
	"%(contents:subject)")

	$remoteformat = @("%(color:brightred)R: %(refname:short)%(color:reset)",
	"%(color:yellow)%(objectname:short)%(color:reset)",
	"%(contents:subject)")

	$remoteBranchesToExclude = [System.Collections.ArrayList]@()
	git for-each-ref refs/heads --color=always --format=$localformat
		| Tee-Object -Variable localBranches
		| ForEach-Object {
				if ($_ -replace '\e\[[0-9;]*m', '' -match "L: \S+ (\S+) \S+ .+") {
					if ($null -ne $Matches[1]) {
						$remoteBranchesToExclude.Add('--exclude') | Out-Null
						$remoteBranchesToExclude.Add("**/$($Matches[1])") | Out-Null
					}
				}
			}

	$remoteBranches = git for-each-ref refs/remotes/**/[^HEAD]* $remoteBranchesToExclude --color=always --format=$remoteformat

	$allBranches = @($localBranches) + @($remoteBranches)
	$fzfOptions = @('--height', '90%',
		'--reverse',
		'--ansi',
		'--border',
		'--border-label', 'ðŸŒ² Branches ',
		'--accept-nth=2',
		'--preview', 'git -c diff.external="difft --display=inline --color=always" show --color=always --ext-diff {2}',
		'--preview-window' ,'hidden',
		'--bind', 'alt-p:change-preview-window(right,99%|right,0%)',
		'--header', 'alt+p: Show Commit
		')
	$selectedBranch = $allBranches | fzf $fzfOptions
	if ($null -ne $selectedBranch) {
		git switch ($selectedBranch -replace '(?:origin\/)?(\S+).*', '$1')
	}
}

function Get-LocalGitBranchesWithDeletedRemotes {
	[Alias("gbdr")]
	Param()

	$remoteBranches = (git ls-remote --branches --quiet) -replace ".*refs/(heads)/(.+?)(\^{})?$", '$2' |
		ForEach-Object {
			[PSCustomObject]@{
				Local = ''
				Remote = $_
			}
		}

	$format = @("%(color:brightgreen)%(refname:short)%(color:reset)",
		"%(color:brightred)%(upstream:short)%(color:reset)",
		"%(color:yellow)%(objectname:short)%(color:reset)",
		"%(contents:subject):%(upstream)")

	$localBranches=git for-each-ref refs/heads/ --color=always --format=$format |
		ForEach-Object {
			$branches = $_ -split ':'
			[PSCustomObject]@{
				Local = $branches[0]
				Remote = $branches[1] -replace ".*refs/(remotes/origin)/(.+?)(\^{})?$", '$2'
			}
		}

	$localBranchesToDelete =
		Compare-Object -ReferenceObject $remoteBranches -DifferenceObject $localBranches -Property 'Remote' -PassThru |
			Where-Object { ($_.SideIndicator -eq '=>') -and ('' -ne $_.Remote) }

	$localBranchesToDelete | ForEach-Object {
		$_.Local | Select-String "." -Raw -NoEmphasis
	}
}

function Remove-LocalGitBranchesWithDeletedRemotes {
	[CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]
	[Alias("rbdr")]
	Param()

	$remoteBranches = (git ls-remote --branches --quiet) -replace ".*refs/(heads)/(.+?)(\^{})?$", '$2' |
		ForEach-Object {
			[PSCustomObject]@{
				Local = ''
				Remote = $_
			}
		}

	$localBranches=git for-each-ref refs/heads/ --format='%(refname:short):%(upstream)' |
		ForEach-Object {
			$branches = $_ -split ':'
			[PSCustomObject]@{
				Local = $branches[0]
				Remote = $branches[1] -replace ".*refs/(remotes/origin)/(.+?)(\^{})?$", '$2'
			}
		}

	$localBranchesToDelete =
		Compare-Object -ReferenceObject $remoteBranches -DifferenceObject $localBranches -Property 'Remote' -PassThru |
			Where-Object { ($_.SideIndicator -eq '=>') -and ('' -ne $_.Remote) }

	if ($PSCmdlet.ShouldProcess('Performing the operation "git remote update --prune"','','')) {
		git remote update --prune
	}

	$localBranchesToDelete | ForEach-Object {
		if ($PSCmdlet.ShouldProcess("$($_.Local)", 'git branch --delete')) {
			git branch --delete $_.Local
		}
	}
}
